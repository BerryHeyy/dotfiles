* Keep Emacs Clean
** Custom.el
Set the custom file so init.el doesn't get cluttered with auto-generated stuff.

#+begin_src emacs-lisp
  (setq custom-file "~/.emacs.d/custom.el")
  (load custom-file)
#+end_src
** Disable unwanted features
*** Start emacs in a scratch buffer
#+begin_src emacs-lisp
  (setq inhibit-startup-message t)
#+end_src
*** Disable scrollbar
#+begin_src emacs-lisp
  (scroll-bar-mode -1)
#+end_src
*** Disable toolbar
#+begin_src emacs-lisp
  (tool-bar-mode -1)
#+end_src
*** Disable tooltips
#+begin_src emacs-lisp
  (tooltip-mode -1)
#+end_src
*** Disable fringes
#+begin_src emacs-lisp
  (set-fringe-mode -1)
#+end_src
*** Disable menubar
#+begin_src emacs-lisp
  (menu-bar-mode -1)
#+end_src
** Enable visual bell
The bell sound is very annoying and frequent, so replace it with a visual bell.
#+begin_src emacs-lisp
  (setq visible-bell t)
#+end_src
** Following symlinks
Emacs will ask to follow symlinks by default. Disable this behavior.
#+begin_src emacs-lisp
  (setq vc-follow-symlinks t)
#+end_src
* Package Management
** Initialize package sources
#+begin_src emacs-lisp
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))
#+end_src
** Initialize use-package
#+begin_src emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)
#+end_src
* General Configuration
** Font
#+begin_src emacs-lisp
  (set-face-attribute 'default nil :font "FiraCode Nerd Font Mono" :height 120)
#+end_src
** Line numbers
#+begin_src emacs-lisp
  (column-number-mode)
  (global-display-line-numbers-mode t)
  (setq display-line-numbers-type 'relative)
#+end_src
** Tabs
#+begin_src emacs-lisp
  (setq-default tab-width 4
                indent-tabs-mode nil) ;; Always use spaces.
#+end_src
** Theme
Use the gruvbox theme.
#+begin_src emacs-lisp
  (use-package gruvbox-theme
    :init (load-theme 'gruvbox-dark-medium t))
#+end_src
** Emacs completion
*** Ivy
#+begin_src emacs-lisp
  (use-package ivy
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)	
           ("C-l" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :init (ivy-mode 1))
#+end_src
*** Counsel
#+begin_src emacs-lisp
  (use-package counsel
    :bind (("M-x" . counsel-M-x)
           ("C-x b" . counsel-ibuffer)
           ("C-x C-f" . counsel-find-file)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history)))
#+end_src
** Which key
#+begin_src emacs-lisp
  (use-package which-key
    :init (which-key-mode)
    :diminish 'which-key-mode
    :config
    (setq which-key-idle-delay 1))
#+end_src
** Rainbow delimiters
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src
** Helpful
#+begin_src emacs-lisp
  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))
#+end_src
* Keybindings
** Evil
Use evil because I'm too used to vim keybindings.
#+begin_src emacs-lisp
  (use-package undo-tree
    :config
    (setq undo-tree-auto-save-history nil)
    (global-undo-tree-mode 1))

  (defun switch-to-last-buffer ()
    (interactive)
    (switch-to-buffer nil))

  (defun berry/evil-jk ()
    (interactive)
    (let* ((initial-key ?j)
           (final-key ?k)
           (timeout 0.5)
           (event (read-event nil nil timeout)))
      (if event
          ;; timeout met
          (if (and (characterp event) (= event final-key))
              (evil-normal-state)
            (insert initial-key)
            (push event unread-command-events))
        ;; timeout exceeded
        (insert initial-key))))

  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    (setq evil-undo-system 'undo-tree)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal)

    (define-key evil-insert-state-map (kbd "j") 'berry/evil-jk)

    (define-key evil-normal-state-map (kbd "C-k") 'switch-to-last-buffer))
#+end_src
*** Evil collection
#+begin_src emacs-lisp
  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))
#+end_src
*** Leader Bindings (general.el)
#+begin_src emacs-lisp
  (use-package general
    :config
    (general-evil-setup t)

    (general-create-definer berry/leader-key-def
                            :keymaps '(normal visual emacs)
                            :prefix "\\"))
#+end_src
* Org Mode
#+begin_src emacs-lisp
  (defun berry/org-mode-setup ()
    (org-indent-mode)
    (visual-line-mode 1)
    (setq evil-auto-indent nil)

    ;; Preview all latex fragments.
    (setq current-prefix-arg '(16))
    (call-interactively 'org-latex-preview))

  (use-package org
    :hook (org-mode . berry/org-mode-setup)
    :config

    (setq org-hide-emphasis-markers t)

    (setq org-agenda-start-with-log-mode t)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)

    (setq org-agenda-files '("~/documents/notes/informatica.org"))

    (define-key org-mode-map (kbd "<normal-state> C-k") 'switch-to-last-buffer)

    (setq org-format-latex-options (plist-put org-format-latex-options :scale 1.5)))
#+end_src
** Fragtog
Package for toggling latex snippets in org files.
#+begin_src emacs-lisp
  (use-package org-fragtog
    :after org
    :config
    (add-hook 'org-mode-hook 'org-fragtog-mode))
#+end_src
** Org Appear
This package hides markup around words, and reveals them when the cursor is inside them.
#+begin_src emacs-lisp
  (use-package org-appear
    :after org
    :config
    (add-hook 'org-mode-hook 'org-appear-mode))
#+end_src
* Discord Rich Presence
#+begin_src emacs-lisp
  (use-package elcord
    :config
    (setq elcord-display-elapsed nil)
    (setq elcord-display-line-numbers nil)
    (setq elcord-use-major-mode-as-main-icon t)
    (setq elcord-idle-timer nil)
    (elcord-mode))
#+end_src
* Development
** General Development Configs
*** Color Column (fill column, ruler)
#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook (lambda ()
                              (display-fill-column-indicator-mode)
                              (setq display-fill-column-indicator-column 120)))
#+end_src
** Terminal
#+begin_src emacs-lisp
  (defun berry/toggle-term ()
    "Toggle the terminal buffer window"
    (interactive)
    (let ((w (get-buffer-window "*terminal*")) (prgm "/bin/bash"))
      (if w
          (delete-window w) ;; Close terminal window.
        (progn ;; Open new terminal window.
          (setq w (split-window-below -20))
          (select-window w)
          (term prgm)))))

  (define-key evil-normal-state-map (kbd "C-\\") 'berry/toggle-term)
#+end_src
** Git
*** Magit
#+begin_src emacs-lisp
  (use-package magit
    :config
    (berry/leader-key-def
      "gg" 'magit-status))
#+end_src
*** Magit-todos
#+begin_src emacs-lisp
  (use-package magit-todos)
#+end_src
** Projectile
#+begin_src emacs-lisp
  (use-package projectile
    :init
    (setq projectile-project-search-path '(("~/prgm/" . 2)))
    :config
    (projectile-mode +1)

    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)

    (berry/leader-key-def
      "pf" 'projectile-find-file
      "pp" 'projectile-switch-project
      "pc" 'projectile-compile-project
      "pr" 'projectile-run-project))
#+end_src
** Treesitter
#+begin_src emacs-lisp
  (use-package tree-sitter
    :hook ((c-mode c++-mode) . (lambda () (tree-sitter-mode) (tree-sitter-hl-mode)))
    :config
    (require 'tree-sitter))

  (use-package tree-sitter-langs
    :config
    (require 'tree-sitter-langs))
#+end_src
** Lsp
For some reason, the lsp lens feature lags my emacs out.
#+begin_src emacs-lisp
  (use-package lsp-ui
    :config
    (setq lsp-ui-sideline-enable t)
    (setq lsp-ui-sideline-show-hover nil)
    (setq lsp-ui-doc-position 'bottom))

  (use-package lsp-mode
    :commands lsp
    :config
    (setq lsp-lens-enable nil))
#+end_src
*** Flycheck
Flycheck replaces the old flymake.
#+begin_src emacs-lisp
  (use-package flycheck
    :hook (lsp-mode . flycheck-mode))
#+end_src
*** C/C++
#+begin_src emacs-lisp
  (use-package ccls
    :hook ((c-mode c++-mode) .
           (lambda () (require 'ccls) (lsp)))
    :config
    (setq ccls-initialization-options '(:compilationDatabaseDirectory "build/"))

    ;; Set style variables.
    (c-set-offset 'innamespace 0)

    (setq-default lsp-enable-indentation nil
                  lsp-enable-on-type-formatting nil
                  c-default-style "bsd"
                  c-basic-offset 4
                  tab-width 4))
#+end_src
** Dap
#+begin_src emacs-lisp
  (use-package dap-mode
    :hook ((c-mode c++-mode) . (lambda ()
                                 (dap-mode 1)
                                 (dap-ui-mode 1)
                                 (dap-tooltip-mode 1)
                                 (dap-ui-controls-mode 1)))
    :config
    (setq dap-auto-configure-features '(locals tooltip)))
#+end_src
*** C/C++
#+begin_src emacs-lisp
  (require 'dap-lldb)

  (setq dap-lldb-debug-program '("/usr/bin/lldb-vscode"))

  (setq dap-lldb-debugged-program-function (lambda ()
                                             (read-file-name "Select executable to debug." (projectile-project-root))))

  (dap-register-debug-template
   "LLDB Debug"
   (list :type "lldb-vscode"
         :cwd nil
         :args nil
         :request "launch"
         :program nil))
#+end_src

Keybinds:
#+begin_src emacs-lisp
  (berry/leader-key-def
    "dd" 'dap-debug-last
    "db" 'dap-breakpoint-toggle
    "ds" 'dap-step-in
    "dn" 'dap-next
    "dc" 'dap-continue
    "dk" 'dap-disconnect)
#+end_src
